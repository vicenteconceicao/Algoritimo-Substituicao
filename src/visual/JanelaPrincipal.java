/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visual;

import representacoes.Frame;
import representacoes.Page;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author horgun
 */
public class JanelaPrincipal extends javax.swing.JFrame {
    private int quantPaginas = 0;
    private int quantMolduras = 0;
    private String simular = "";
    private JLabel tempo;
    private JTable tabela;
    private JTable molduras;
    private ArrayList<Page> listaPaginas;
    private ArrayList<Frame> listaMolduras;
    private long timerStart;
    private JButton botaoLer;
    private JButton botaoModificar;
    private ArrayDeque<Frame> fila = new ArrayDeque<>();
    private int intervaloRelogio = 10;
    private Timer t;

    public int getIntervaloRelogio() {
        return intervaloRelogio;
    }

    public void setIntervaloRelogio(int intervaloRelogio) {
        this.intervaloRelogio = intervaloRelogio;
    }

    public int getQuantPaginas() {
        return quantPaginas;
    }

    public void setQuantPaginas(int quantPaginas) {
        this.quantPaginas = quantPaginas;
    }

    public int getQuantMolduras() {
        return quantMolduras;
    }

    public void setQuantMolduras(int quantMolduras) {
        this.quantMolduras = quantMolduras;
    }
    
    /**
     * Creates new form JanelaPrincipal
     */
    public JanelaPrincipal() {
        initComponents();
        this.setExtendedState(this.MAXIMIZED_BOTH);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painelBotoes = new javax.swing.JPanel();
        painelConteudo = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        botaoSegundaChance = new javax.swing.JMenuItem();
        botaoFifo = new javax.swing.JMenuItem();
        botaoLru = new javax.swing.JMenuItem();
        botaoNRU = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Algoritmos de Substituição de Páginas");
        setMinimumSize(new java.awt.Dimension(800, 600));
        getContentPane().add(painelBotoes, java.awt.BorderLayout.PAGE_START);

        painelConteudo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setFont(new java.awt.Font("FreeSans", 0, 36)); // NOI18N
        jLabel1.setText("Algoritmos de Substituição de Páginas");
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        painelConteudo.add(jLabel1);

        getContentPane().add(painelConteudo, java.awt.BorderLayout.CENTER);

        jMenu4.setText("Simulações");

        botaoSegundaChance.setText("Second Chance");
        botaoSegundaChance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoSegundaChanceActionPerformed(evt);
            }
        });
        jMenu4.add(botaoSegundaChance);

        botaoFifo.setText("First In First Out");
        botaoFifo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoFifoActionPerformed(evt);
            }
        });
        jMenu4.add(botaoFifo);

        botaoLru.setText("Least Recently Used");
        botaoLru.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoLruActionPerformed(evt);
            }
        });
        jMenu4.add(botaoLru);

        botaoNRU.setText("Not Recently Used");
        botaoNRU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoNRUActionPerformed(evt);
            }
        });
        jMenu4.add(botaoNRU);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoSegundaChanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoSegundaChanceActionPerformed
        // TODO add your handling code here:
        this.simular = "segundachance";
        Propriedades prop = new Propriedades(this, rootPaneCheckingEnabled);
        prop.executar(this);
    }//GEN-LAST:event_botaoSegundaChanceActionPerformed

    private void botaoFifoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoFifoActionPerformed
        // TODO add your handling code here:
        this.simular = "fifo";
        Propriedades prop = new Propriedades(this, rootPaneCheckingEnabled);
        prop.executar(this);
    }//GEN-LAST:event_botaoFifoActionPerformed

    private void botaoLruActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoLruActionPerformed
        // TODO add your handling code here:
        this.simular = "lru";
        Propriedades prop = new Propriedades(this, rootPaneCheckingEnabled);
        prop.executar(this);
    }//GEN-LAST:event_botaoLruActionPerformed

    private void botaoNRUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoNRUActionPerformed
        // TODO add your handling code here:
        this.simular = "nru";
        Propriedades prop = new Propriedades(this, rootPaneCheckingEnabled);
        prop.executar(this);
    }//GEN-LAST:event_botaoNRUActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JanelaPrincipal().setVisible(true);
            }
        });
    }
    
    //Cria as tabelas de páginas e de molduras
    public void inicializarMetodo(){
        //Limpar
        painelBotoes.removeAll();
        painelConteudo.removeAll();
        fila = new ArrayDeque<>();
        if (t != null){
            t.cancel();
        }
        //fim limpar
        
        botaoLer = new JButton("Ler");
        botaoLer.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (simular.contains("segundachance"))
                    segundaChance();
                else if (simular.contains("fifo"))
                    fifo();
                else if (simular.contains("lru"))
                    lru();
                else if (simular.contains("nru"))
                    nru();
            }
        });
        botaoModificar = new JButton("Modificar");
        botaoModificar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selecionada = tabela.getSelectedRow();
                if (selecionada != -1 && listaMolduras.contains(new Frame(0, listaPaginas.get(selecionada)))){
                    listaPaginas.get(selecionada).setBitR(1);
                    listaPaginas.get(selecionada).setBitM(1);
                    listaPaginas.get(selecionada).setTempoUltimaRef((System.currentTimeMillis() - timerStart)/1000);
                    atualizarTabela("modificar");
                }
            }
        });
        JLabel titulo = new JLabel();
        if (this.simular.contains("segundachance"))
            titulo.setText("Segunda Change");
        else if (this.simular.contains("fifo"))
            titulo.setText("First In First Out");
        else if (this.simular.contains("lru"))
            titulo.setText("Least Recently Used");
        else if (this.simular.contains("nru"))
            titulo.setText("Not Recently Used");
        painelBotoes.add(titulo);
        painelBotoes.add(botaoLer);
        painelBotoes.add(botaoModificar);
        timerStart = System.currentTimeMillis();//Inicia relógio
        tempo = new JLabel("Tempo: " + (System.currentTimeMillis() - timerStart)/1000);//Label para mostrar o relógio
        
        painelBotoes.add(tempo);
        //Atualiza o relógio visualmente a cada segundo
        t = new Timer();
        t.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                tempo.setText("Tempo: " + (System.currentTimeMillis() - timerStart)/1000);
                if (tabela != null && !listaPaginas.isEmpty()){
                    for (Page p : listaPaginas){
                        if (((System.currentTimeMillis() - timerStart)/1000) - p.getTempoUltimaRef() >= intervaloRelogio)
                            p.setBitR(0);
                    }
                    atualizarTabela("relogio");
                }
            }
        }, 0, 1000);
        criarTabela();
        criarMolduras();
        this.pack();
    }
    //algoritmo de substuição segunda chance
    public void segundaChance(){
        int linhaTabela = tabela.getSelectedRow();
        if (linhaTabela != -1){
            int pagina = (int)tabela.getModel().getValueAt(linhaTabela, 0);
            if (fila.contains(new Frame(0, listaPaginas.get(pagina)))){//pagina já está na moldura
                listaPaginas.get(pagina).setTempoUltimaRef((System.currentTimeMillis() - timerStart)/1000);
                listaPaginas.get(pagina).setBitR(1);
            }
            else{
                if (fila.isEmpty() || fila.size() < quantMolduras){//Molduras vazias ou tem espaço 
                    Frame f = new Frame(fila.size(), listaPaginas.get(pagina));
                    f.getPage().setBitR(1);
                    f.getPage().setTempoCarregado((System.currentTimeMillis() - timerStart)/1000);
                    f.getPage().setTempoUltimaRef((System.currentTimeMillis() - timerStart)/1000);
                    fila.addLast(f);
                    listaMolduras.get(f.getMoldura()).setPage(f.getPage());
                }
                else{
                    boolean substituiu = false;
                    while (!substituiu){
                        for (Iterator<Frame> iterator = fila.iterator(); iterator.hasNext();) {
                            Frame f = iterator.next();
                            if (f.getPage().getBitR() == 1){
                                f.getPage().setBitR(0);
                            }
                            else{//Substitui pagina na moldura
                                Frame f2 = new Frame(f.getMoldura(), listaPaginas.get(pagina));
                                f2.getPage().setBitR(1);
                                f2.getPage().setTempoCarregado((System.currentTimeMillis() - timerStart)/1000);
                                f2.getPage().setTempoUltimaRef((System.currentTimeMillis() - timerStart)/1000);
                                f.getPage().setBitM(0);
                                fila.remove(f);
                                fila.addLast(f2);//coloca no final da lista
                                listaMolduras.get(f2.getMoldura()).setPage(f2.getPage());
                                substituiu = true;
                                break;
                            }
                        }
                    }
                }
            }
            atualizarTabela("ler");
        }
    }
    
    public void fifo(){
        int linhaTabela = tabela.getSelectedRow();
        if (linhaTabela != -1){
            int pagina = (int)tabela.getModel().getValueAt(linhaTabela, 0);
            if (fila.contains(new Frame(0, listaPaginas.get(pagina)))){//pagina já está na moldura
                listaPaginas.get(pagina).setTempoUltimaRef((System.currentTimeMillis() - timerStart)/1000);
                listaPaginas.get(pagina).setBitR(1);
            }
            else{
                if (fila.isEmpty() || fila.size() < quantMolduras){//Molduras vazias ou tem espaço 
                    Frame f = new Frame(fila.size(), listaPaginas.get(pagina));
                    f.getPage().setBitR(1);
                    f.getPage().setTempoCarregado((System.currentTimeMillis() - timerStart)/1000);
                    f.getPage().setTempoUltimaRef((System.currentTimeMillis() - timerStart)/1000);
                    fila.addLast(f);
                    listaMolduras.get(f.getMoldura()).setPage(f.getPage());
                }
                else{
                    Frame f = fila.poll();
                    Frame f2 = new Frame(f.getMoldura(), listaPaginas.get(pagina));
                    f2.getPage().setBitR(1);
                    f2.getPage().setTempoCarregado((System.currentTimeMillis() - timerStart)/1000);
                    f2.getPage().setTempoUltimaRef((System.currentTimeMillis() - timerStart)/1000);
                    f.getPage().setBitM(0);
                    fila.addLast(f2);
                    listaMolduras.get(f2.getMoldura()).setPage(f2.getPage());
                }
            }
            atualizarTabela("ler");
        }
    }
    
    public void lru(){
        int linhaTabela = tabela.getSelectedRow();
        if (linhaTabela != -1){
            int pagina = (int)tabela.getModel().getValueAt(linhaTabela, 0);
            if (fila.contains(new Frame(0, listaPaginas.get(pagina)))){//pagina já está na moldura
                listaPaginas.get(pagina).setTempoUltimaRef((System.currentTimeMillis() - timerStart)/1000);
                listaPaginas.get(pagina).setBitR(1);
                for (Iterator<Frame> iterator = fila.iterator(); iterator.hasNext();) {
                    Frame f = iterator.next();
                    if (f.getPage().getPagina() == pagina){
                        fila.remove(f);
                        fila.addLast(f);
                        break;
                    }
                }
            }
            else{
                if (fila.isEmpty() || fila.size() < quantMolduras){//Molduras vazias ou tem espaço 
                    Frame f = new Frame(fila.size(), listaPaginas.get(pagina));
                    f.getPage().setBitR(1);
                    f.getPage().setTempoCarregado((System.currentTimeMillis() - timerStart)/1000);
                    f.getPage().setTempoUltimaRef((System.currentTimeMillis() - timerStart)/1000);
                    fila.addLast(f);
                    listaMolduras.get(f.getMoldura()).setPage(f.getPage());
                }
                else{
                    Frame f = fila.poll();
                    Frame f2 = new Frame(f.getMoldura(), listaPaginas.get(pagina));
                    f2.getPage().setBitR(1);
                    f2.getPage().setTempoCarregado((System.currentTimeMillis() - timerStart)/1000);
                    f2.getPage().setTempoUltimaRef((System.currentTimeMillis() - timerStart)/1000);
                    f.getPage().setBitM(0);
                    fila.addLast(f2);
                    listaMolduras.get(f2.getMoldura()).setPage(f2.getPage());
                }
            }
            atualizarTabela("ler");
        }
    }
    
    //Escrever algoritmo de substuição NRU
    public void nru(){
        int linhaTabela = tabela.getSelectedRow();
        if (linhaTabela != -1){
            int pagina = (int)tabela.getModel().getValueAt(linhaTabela, 0);
            if (fila.contains(new Frame(0, listaPaginas.get(pagina)))){//pagina já está na moldura
                listaPaginas.get(pagina).setTempoUltimaRef((System.currentTimeMillis() - timerStart)/1000);
                listaPaginas.get(pagina).setBitR(1);
            }
            else{
                if (fila.isEmpty() || fila.size() < quantMolduras){//Molduras vazias ou tem espaço 
                    Frame f = new Frame(fila.size(), listaPaginas.get(pagina));
                    f.getPage().setBitR(1);
                    f.getPage().setTempoCarregado((System.currentTimeMillis() - timerStart)/1000);
                    f.getPage().setTempoUltimaRef((System.currentTimeMillis() - timerStart)/1000);
                    fila.addLast(f);
                    listaMolduras.get(f.getMoldura()).setPage(f.getPage());
                }
                else{
                    Frame fMenor = null;
                    int menor = 3;
                    for (Frame f : listaMolduras) {
                        int atual = 3;
                        if (f.getPage().getBitR() == 0 && f.getPage().getBitM() == 0){
                            atual = 0;
                        }
                        else if (f.getPage().getBitR() == 0 && f.getPage().getBitM() == 1){
                            atual = 1;
                        }
                        else if (f.getPage().getBitR() == 1 && f.getPage().getBitM() == 0){
                            atual = 2;
                        }
                        else if (f.getPage().getBitR() == 1 && f.getPage().getBitM() == 1){
                            atual = 3;
                        }
                        
                        if (atual <= menor){
                            menor = atual;
                            fMenor = f;
                        }
                    }
                    
                    Frame f2 = new Frame(fMenor.getMoldura(), listaPaginas.get(pagina));
                    f2.getPage().setBitR(1);
                    f2.getPage().setTempoCarregado((System.currentTimeMillis() - timerStart)/1000);
                    f2.getPage().setTempoUltimaRef((System.currentTimeMillis() - timerStart)/1000);
                    fMenor.getPage().setBitM(0);
                    fila.remove(fMenor);
                    fila.addLast(f2);//coloca no final da lista
                    listaMolduras.get(f2.getMoldura()).setPage(f2.getPage());
                    
                }
            }
            atualizarTabela("ler");
        }
    }
    
    public void criarTabela(){
        String colunas[] = {"Pagina", "Tempo Carregado", "Tempo Ultima Ref.", "R", "M", "Moldura"};
        listaPaginas = new ArrayList<>();
        Object dados[][] = new Object[quantPaginas][5];
        for (int i = 0; i < quantPaginas; i++){
            Page p = new Page(i, 0, 0, 0, 0, "");
            listaPaginas.add(p);
            Object obj[] = {p.getPagina(), p.getTempoCarregado(), p.getTempoUltimaRef(), p.getBitR(), p.getBitM(), p.getHistory()};
            dados[i] = obj;
        }
        JTable tab = new JTable();
        tab.setModel(new DefaultTableModel(dados, colunas){//Define que as células não são editáveis
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        });
        tab.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tabela = tab;
        tabela.getColumnModel().getColumn(5).setMinWidth(600);
        JScrollPane tabelaScrollPane = new JScrollPane(tab);
        tabelaScrollPane.setPreferredSize(new Dimension(1024, 600));
        painelConteudo.add(tabelaScrollPane);
    }
    
    public void atualizarTabela(String quemChamou){
        for (int i = 0; i < quantPaginas; i++){
            Page p = listaPaginas.get(i);
            if (quemChamou.contains("ler")){
                boolean tinha = false;
                for (Frame f : listaMolduras){
                    if (f.equals(new Frame(0, p))){
                        tinha = true;
                        p.setHistory(p.getHistory().replaceAll("\\[", "").replaceAll("\\]", ""));
                        p.setHistory(p.getHistory() + "[" + f.getMoldura() + "]->");
                    }
                }
                if (!tinha){
                    p.setHistory(p.getHistory().replaceAll("\\[", "").replaceAll("\\]", ""));
                    p.setHistory(p.getHistory() + "[X]->");
                }
            }
            tabela.getModel().setValueAt(p.getTempoCarregado(), i, 1);
            tabela.getModel().setValueAt(p.getTempoUltimaRef(), i, 2);
            tabela.getModel().setValueAt(p.getBitR(), i, 3);
            tabela.getModel().setValueAt(p.getBitM(), i, 4);
            tabela.getModel().setValueAt(p.getHistory(), i, 5);
            
        }
    }
    
    public void criarMolduras(){
//        String colunas[] = {"Moldura", "Pagina"};
        listaMolduras = new ArrayList<>();
//        Object dados[][] = new Object[quantMolduras][2];
        for (int i = 0; i < quantMolduras; i++){
            Frame f = new Frame(i, null);
            listaMolduras.add(f);
//            Object obj[] = {f.getMoldura(), f.getPage()};
//            dados[i] = obj;
        }
//        JTable tab = new JTable();
//        tab.setModel(new DefaultTableModel(dados, colunas){//Define que as células não são editáveis
//            @Override
//            public boolean isCellEditable(int row, int column) {
//                return false;
//            }
//        });
//        tab.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
//        molduras = tab;
//        JScrollPane moldurasScrollPane = new JScrollPane(tab);
//        painelConteudo.add(moldurasScrollPane);
    }
//    
//    public void atualizarMolduras(int frameAnterior, int paginaAnterior){
//        String colunas[] = {"Moldura", "Pagina"};
//        Object dados[][] = new Object[quantMolduras][2];
//        for (int i = 0; i < quantMolduras; i++){
//            Frame f = listaMolduras.get(i);
//            if (frameAnterior != -1 && paginaAnterior != -1 && frameAnterior == i){
//                Object obj[] = {f.getMoldura(), paginaAnterior + "-->" + f.getPage()};
//                dados[i] = obj;
//            }
//            else{
//                Object obj[] = {f.getMoldura(), f.getPage()};
//                dados[i] = obj;
//            }
//            
//        }
//        molduras.setModel(new DefaultTableModel(dados, colunas){//Define que as células não são editáveis
//            @Override
//            public boolean isCellEditable(int row, int column) {
//                return false;
//            }
//        });
//        molduras.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem botaoFifo;
    private javax.swing.JMenuItem botaoLru;
    private javax.swing.JMenuItem botaoNRU;
    private javax.swing.JMenuItem botaoSegundaChance;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel painelBotoes;
    private javax.swing.JPanel painelConteudo;
    // End of variables declaration//GEN-END:variables
}
